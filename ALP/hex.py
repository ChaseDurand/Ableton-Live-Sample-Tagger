import sys
from io import StringIO


# Manually copying data from xml for testing
test
test
test
test

def hex_parse(data):

    path = bytearray.fromhex(data)
    found_path = ''
    '''
    #Redirecting stdout so I can save the print output because decoding the hex is giving me problems
    #stdout is reset to previous value at end
    old_stdout = sys.stdout
    sys.stdout = mystdout = StringIO()
    print(path)
    sys.stdout = old_stdout
    path = mystdout.getvalue()
    #Thanks stackoverflow.
    '''

    #Finds : which looks to be uniquely found in the sample path
    #I should probably figure out what the rest of the hex is and how it's structured
    #This implementation ignores volumes, which appears to be stored early in the hex, so I'm unsure how it handles samples from another volume, such as a USB drive
    i = 0
    while i < len(path):
        if (path[i] != 0x00) and (path[i] != 0xFF):
            first_index = i
            length = path[i]
            offset = 1
            found_string = ''
            while (offset <= length) and (path[first_index+offset] != 0x00) and (path[first_index+offset] != 0xFF):
                if(first_index+offset) == len(path):
                    print('woah now')
                found_string += chr(path[first_index+offset])
                #print(chr(path[first_index + offset]), end='')
                offset += 1
            if offset == length+1:
                #possible valid string
                if found_string != '/':
                    found_path = found_string
            i = first_index+offset
            #i = i+length
        #print(path[i])
        i += 1
    '''
    pathstart = path.find(":",50) #path starts at first colon - some samples have colon earlier in string and I have no idea why
    pathend = path.find("\\",pathstart) #path ends at first backslash following path
    path = path[pathstart:pathend] #reduce string to just the range of the found path
    path = path.replace(":","/")
    #if path == '/':
    #    print("ahhhhh!")
    return path
    '''
    found_path = '/' + found_path
    return(found_path)


#hex_parse(test1)
#hex_parse(test2)
#hex_parse(test3)
#hex_parse(test4)